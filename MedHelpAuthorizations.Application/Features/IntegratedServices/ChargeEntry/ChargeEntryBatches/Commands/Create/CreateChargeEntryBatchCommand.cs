using AutoMapper;using MedHelpAuthorizations.Application.Interfaces.Repositories;using MedHelpAuthorizations.Application.Interfaces.Services;using MedHelpAuthorizations.Domain.Entities.Enums;using MedHelpAuthorizations.Domain.Entities.IntegratedServices;using MedHelpAuthorizations.Shared.Wrapper;using System.ComponentModel.DataAnnotations;using System.Threading;namespace MedHelpAuthorizations.Application.Features.IntegratedServices.ChargeEntry.ChargeEntryBatches.Commands.Create{    public class CreateChargeEntryBatchCommand : IRequest<Result<int>>    {        [Required]        public int ChargeEntryRpaConfigurationId { get; set; }        [Required]        public DateTime DateOfServiceFrom { get; set; }        [Required]        public DateTime DateOfServiceTo { get; set; }        public CreateChargeEntryBatchCommand()        {        }
    }    public class CreateChargeEntryBatchCommandHandler : IRequestHandler<CreateChargeEntryBatchCommand, Result<int>>    {        private readonly IChargeEntryBatchRepository _chargeEntryBatchRepository;        private readonly ICurrentUserService _currentUserService;        private readonly IMapper _mapper;        private IUnitOfWork<int> _unitOfWork { get; set; }
        //private int clientId => currentUserService.ClientId;

        public CreateChargeEntryBatchCommandHandler(IChargeEntryBatchRepository chargeEntryBatchRepository, IUnitOfWork<int> unitOfWork, IMapper mapper, ICurrentUserService currentUserService)        {            _chargeEntryBatchRepository = chargeEntryBatchRepository;            _currentUserService = currentUserService;            _unitOfWork = unitOfWork;            _mapper = mapper;        }        public async Task<Result<int>> Handle(CreateChargeEntryBatchCommand request, CancellationToken cancellationToken)        {            var chargeEntryBatch = _mapper.Map<ChargeEntryBatch>(request);
            //chargeEntryBatch.ClientId = _clientId;
            await _chargeEntryBatchRepository.InsertAsync(chargeEntryBatch);            var chargeEntryBatchHistory = _mapper.Map<ChargeEntryBatchHistory>(chargeEntryBatch);            chargeEntryBatchHistory.DbOperationId = DbOperationEnum.Insert;            chargeEntryBatch.ChargeEntryBatchHistories.Add(chargeEntryBatchHistory);            await _unitOfWork.Commit(cancellationToken);            return await Result<int>.SuccessAsync(chargeEntryBatch.Id);        }    }}
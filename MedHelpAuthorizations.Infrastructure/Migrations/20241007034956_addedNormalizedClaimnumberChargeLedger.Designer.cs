// <auto-generated />
using System;
using MedHelpAuthorizations.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedHelpAuthorizations.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241007034956_addedNormalizedClaimnumberChargeLedger")]
    partial class addedNormalizedClaimnumberChargeLedger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientDocumentType", b =>
                {
                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentTypesId")
                        .HasColumnType("int");

                    b.HasKey("ClientsId", "DocumentTypesId");

                    b.HasIndex("DocumentTypesId");

                    b.ToTable("ClientDocumentType", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Application.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressStreetLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressStreetLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryPointBarcode")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Normalized")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StateId");

                    b.ToTable("Addresses", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("AddressTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AdjustmentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("AdjustmentTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AdministrativeGender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdministrativeGenders", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AlphaSplit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("BeginAlpha")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Code")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EndAlpha")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AlphaSplits", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApiIntegration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ApiIntegrationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("GroupClaimLines")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RequireDateOfBirth")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePayerIdentifier")
                        .HasColumnType("bit");

                    b.Property<bool>("RequirePolicyNumber")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireTaxId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApiIntegrationTypeId");

                    b.ToTable("ApiIntegrations", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApiIntegrationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ApiIntegrationTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApplicationFeature", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationFeatures", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApplicationReport", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationFeatureId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFeatureId");

                    b.ToTable("ApplicationReports", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AuthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorizationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CallbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CareManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientPlaceOfServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Completeby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("AuthorizationStatusId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientPlaceOfServiceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientId");

                    b.ToTable("Authorizations", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AuthorizationClientCptCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<int>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ClientCptCodeId");

                    b.ToTable("AuthorizationClientCptCode");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AuthorizationStatus", b =>
                {
                    b.Property<int>("Id")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AuthorizationStatuses", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Cardholder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SignatureOnFile")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PersonId");

                    b.ToTable("Cardholders", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClaimStatusTotalResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AllowedAmountSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BatchProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BilledOnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ChargedSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClaimReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientProviderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NonAllowedAmountSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmountSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WriteOffAmountSum")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientCptCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientProviderId");

                    b.ToTable("ClaimStatusTotalResults");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClaimStatusType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("ClaimStatusTypes");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ClientCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ClientKpiId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FaxNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InitialAnalysisEndOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NpiNumber")
                        .HasColumnType("int");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("SourceSystemId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientKpiId");

                    b.HasIndex("ClientQuestionnaireId");

                    b.ToTable("Clients", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientAdjustmentCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ClientAdjustmentCodes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientApiIntegrationKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiIntegrationId")
                        .HasColumnType("int");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ApiPassword")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ApiSecret")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ApiUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiUsername")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiIntegrationId");

                    b.HasIndex("ClientId", "ApiIntegrationId", "ApiVersion");

                    b.ToTable("ClientApiIntegrationKeys", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientApplicationFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationFeatureId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationFeatureId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientApplicationFeatures", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientAuthType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAuthTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientCptCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CptCodeGroupId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ScheduledFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOfServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeOfServiceId");

                    b.ToTable("ClientCptCodes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientDayOfOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("clientDaysOfOperation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientEmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeClientId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeRoleId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeClientId");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("ClientEmployeeRoles", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportStatus")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientFeeSchedules", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AllowedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientFeeScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsReimbursable")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ReimbursablePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientCptCodeId");

                    b.HasIndex("ClientFeeScheduleId");

                    b.ToTable("ClientFeeScheduleEntries", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleProviderLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientFeeScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeeScheduleId");

                    b.HasIndex("ProviderLevelId");

                    b.ToTable("ClientFeeScheduleProviderLevels", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientFeeScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeeScheduleId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("ClientFeeScheduleSpecialties", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientHoliday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("HolidayId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("HolidayId");

                    b.ToTable("clientHolidays");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("FaxNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookupName")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("Name")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("PayerIdentifier")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequireLocationInput")
                        .HasColumnType("bit");

                    b.Property<int?>("RpaInsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("RpaInsuranceId");

                    b.ToTable("ClientInsurances", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsuranceAverageCollectionPercentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CollectionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientInsuranceId");

                    b.ToTable("ClientInsuranceAverageCollectionPercentages", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsuranceFeeSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientFeeScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientFeeScheduleId");

                    b.HasIndex("ClientInsuranceId");

                    b.ToTable("ClientInsuranceFeeSchedules", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientKpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AR180DaysInsurancePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AR180DaysSelfPayPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AR90DaysInsurancePercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AR90DaysSelfPayPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AverageDaysInReceivables")
                        .HasColumnType("int");

                    b.Property<int?>("AverageSubmitDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("BDRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CashCollections")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Charges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ChartCompletionTiming")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ClaimDenialPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CleanClaimRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CodingAccuracy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CodingDenialPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CollectionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ComplianceAccuracy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CredentialDenialsCashValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DailyClaimCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("DailyCompletedVisits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DaysInAR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DemographicDenialPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DenialRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DocumentationAccuracy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MonthlyCashCollection")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NoShow")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OpenCharts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OrganizationalPassRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Over90Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ScheduledAppointments")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Visits")
                        .HasColumnType("int");

                    b.Property<int?>("VolumeCredentialDenials")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientKpi", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EligibilityLocationId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("OfficeFaxNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("OfficePhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ClientLocations", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationInsuranceIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("ClientLocationId", "ClientInsuranceId", "ClientId")
                        .IsUnique();

                    b.ToTable("ClientLocationInsuranceIdentifiers", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientLocationId");

                    b.ToTable("ClientLocationSpecialities");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationTypeOfService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeOfServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TypeOfServiceId");

                    b.HasIndex("ClientLocationId", "TypeOfServiceId", "ClientId")
                        .IsUnique();

                    b.ToTable("ClientLocationServiceTypes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientPlaceOfService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Npi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceOfServiceCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PlaceOfServiceCodeId");

                    b.ToTable("ClientPlacesOfService", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Credentials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysToBillKpi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NoShowRateKpi")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PatientsSeenPerDayKpi")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderLevelId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduledVisitsPerDayKpi")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisingProviderId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TaxonomyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Upin")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PersonId");

                    b.HasIndex("ProviderLevelId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("SupervisingProviderId");

                    b.ToTable("Providers", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientProviderLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int>("ClientProviderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientProviderId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("ClientLocationId", "ClientProviderId")
                        .IsUnique();

                    b.ToTable("ClientProviderLocations", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedState")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientQuestionnaires", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryOrder")
                        .HasColumnType("int");

                    b.Property<int>("ClientQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientQuestionnaireId");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("ClientQuestionnaireCategories", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryQuestionOrder")
                        .HasColumnType("int");

                    b.Property<int>("ClientQuestionnaireCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientQuestionnaireCategoryId");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("ClientQuestionnaireCategoryQuestions", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientQuestionnaireCategoryQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefaultAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientQuestionnaireCategoryQuestionId");

                    b.ToTable("ClientQuestionnaireCategoryQuestionOptions", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientRemittance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RemittanceFormType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemittanceSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("UndistributedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientId");

                    b.ToTable("ClientRemittances", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("ClientSpecialties");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientUserApplicationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationReportId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserClientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationReportId");

                    b.HasIndex("UserClientId");

                    b.ToTable("ClientUserApplicationReports", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientUserReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDefaultFilter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<bool>("RunSavedDefaultFilter")
                        .HasColumnType("bit");

                    b.Property<int?>("SystemDefaultReportFilterId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReportId");

                    b.HasIndex("SystemDefaultReportFilterId");

                    b.ToTable("ClientUserReportFilter", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ConcurrentAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialAuthorizationId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SucceededAuthorizationId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("InitialAuthorizationId");

                    b.HasIndex("SucceededAuthorizationId");

                    b.ToTable("ConcurrentAuthorization");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.CptCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeOfServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CptCodes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.DashboardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanDrag")
                        .HasColumnType("bit");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ComponentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dashboard")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Layout")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsLayoutFilter")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Selector")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DashboardItems");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.DbOperation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("DbOperations", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("Documents", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Daily Living Activities-20",
                            IsDefault = false,
                            Name = "DLA20"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Referral Document",
                            IsDefault = false,
                            Name = "Referral"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Insurance Card Document",
                            IsDefault = false,
                            Name = "Insurance Card"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Treatment Plan Document",
                            IsDefault = false,
                            Name = "Treatment Plan"
                        });
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DefaultEmployeeRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("DefaultReceiveReport")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeManagerId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OverallAverageDailyClaimCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("OverallExpectedMonthlyCashCollections")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultEmployeeRoleId");

                    b.HasIndex("EmployeeManagerId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedAverageDailyClaimCount")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpectedMonthlyCashCollections")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReceiveReport")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeClients");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientAlphaSplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlphaSplitId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomBeginAlpha")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CustomEndAlpha")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int?>("EmployeeClientId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlphaSplitId");

                    b.HasIndex("EmployeeClientId");

                    b.ToTable("EmployeeClientAlphaSplits");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeClientId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("EmployeeClientId");

                    b.ToTable("EmployeeClientInsurances");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeClientId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("EmployeeClientId");

                    b.ToTable("EmployeeClientLocations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientUserReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseClientUserReportFilterId")
                        .HasColumnType("int");

                    b.Property<int>("ClientUserReportFilterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeClientId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientUserReportFilterId");

                    b.HasIndex("EmployeeClientId");

                    b.ToTable("EmployeeClientUserReportFilter", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmployeeLevel")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeRoles");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRoleClaimStatusExceptionReasonCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeRoleId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusExceptionReasonCategoryId");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("EmployeeRoleClaimStatusExceptionReasonCategories", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRoleDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeRoleId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeRoleId");

                    b.ToTable("EmployeeRoleDepartments", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.GenderIdentity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GenderIdentities", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TransgenderFemale"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "TransgenderMale"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NonBinary"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Male"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Female"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Other"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "NonDisclose"
                        });
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ImportDocumentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClaimStatusBatchClaimId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimStatusBatchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InputDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusBatchClaimId");

                    b.HasIndex("InputDocumentId");

                    b.ToTable("ImportDocumentMessages");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.InsuranceCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CardholderId")
                        .HasColumnType("int");

                    b.Property<int?>("CardholderRelationshipToPatient")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CopayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceCardOrder")
                        .HasColumnType("int");

                    b.Property<byte?>("InsuranceCoverageTypes")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CardholderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientId");

                    b.ToTable("InsuranceCards", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbortedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AbortedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComputedColumnSql("CHAR(65 + ID/260000) +  CHAR(65 + ID%260000/10000) + RIGHT('0000' + CAST(ID % 10000 AS VARCHAR),4)");

                    b.Property<int>("ChargeEntryRpaConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessStartedByHostIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessStartedByRpaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ChargeEntryRpaConfigurationId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ChargeEntryBatches", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbortedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AbortedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllClaimStatusesResolvedOrExpired")
                        .HasColumnType("bit");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeEntryBatchId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeEntryRpaConfigurationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("DbOperationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessStartDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessStartedByHostIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessStartedByRpaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ChargeEntryBatchId");

                    b.HasIndex("ChargeEntryRpaConfigurationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DbOperationId");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ChargeEntryBatchHistories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryRpaConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FailureReported")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelativeDateRangeId")
                        .HasColumnType("int");

                    b.Property<int>("RpaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RelativeDateRangeId");

                    b.HasIndex("RpaTypeId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("ChargeEntryRpaConfigurations", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargeEntryBatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChargeEntryTransactionBeginDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ChargeEntryTransactionEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CommaDelimitedDxCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommaDelimitedProcedureCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedNpi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedPrimaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedSecondaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineItemControlNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalNpi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalPrimaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalSecondaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SuccessfullyBilled")
                        .HasColumnType("bit");

                    b.Property<string>("UiPathUniqueReference")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeEntryBatchId");

                    b.HasIndex("ChargeEntryTransactionEndDateTimeUtc");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ChargeEntryTransactions", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargeEntryBatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChargeEntryTransactionBeginDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ChargeEntryTransactionEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ChargeEntryTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectedNpi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedPrimaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedSecondaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectedTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DbOperationId")
                        .HasColumnType("int");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineItemControlNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalNpi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalPrimaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalSecondaryInsurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalTaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Successful")
                        .HasColumnType("bit");

                    b.Property<string>("UiPathUniqueReference")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeEntryTransactionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ChargeEntryTransactionHistories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysWaitBetweenAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumPipelineDays")
                        .HasColumnType("int");

                    b.Property<int>("MaximumResolutionAttempts")
                        .HasColumnType("int");

                    b.Property<int>("MinimumResolutionAttempts")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusTypeId");

                    b.ToTable("ClaimLineItemStatuses", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClaimStatuses", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbortedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AbortedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllClaimStatusesResolvedOrExpired")
                        .HasColumnType("bit");

                    b.Property<int?>("AssignedClientRpaConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedToHostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToRpaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToRpaLocalProcessIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComputedColumnSql("CHAR(65 + ID/260000) +  CHAR(65 + ID%260000/10000) + RIGHT('0000' + CAST(ID % 10000 AS VARCHAR),4)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("InputDocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RpaInsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AbortedOnUtc");

                    b.HasIndex("AssignedClientRpaConfigurationId");

                    b.HasIndex("AssignedDateTimeUtc");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("InputDocumentId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("Priority");

                    b.HasIndex("RpaInsuranceId");

                    b.ToTable("ClaimStatusBatches", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BilledAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CalculatedLookupHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalculatedLookupHashInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClaimBilledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimLevelMd5Hash")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)")
                        .HasComputedColumnSql("CONVERT([varchar](34), HASHBYTES('MD5', CONCAT(TRIM(CONVERT(varchar(12), PatientId)), '|', UPPER(NormalizedClaimNumber), '|', UPPER(ClientId), '|', UPPER(ClientInsuranceId), '|', CONVERT(varchar(8),DateOfServiceFrom, 112), '|')), 1)", true);

                    b.Property<string>("ClaimNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("ClaimStatusBatchClaimRootId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimStatusBatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientFeeScheduleEntryId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientProviderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryMd5Hash")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)")
                        .HasComputedColumnSql("CONVERT([varchar](34), HASHBYTES('MD5', CONCAT(TRIM(CONVERT(varchar(12), PatientId)), '|', UPPER(ProcedureCode), '|', UPPER(Modifiers), '|', CONVERT(varchar(8),DateOfServiceFrom, 112), '|')), 1)", true);

                    b.Property<string>("GroupNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplanted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modifiers")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedClaimNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OriginalClaimBilledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("PolicyNumberUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcedureCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RenderingNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("WriteOffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimBilledOn");

                    b.HasIndex("ClaimLevelMd5Hash");

                    b.HasIndex("ClaimStatusBatchClaimRootId");

                    b.HasIndex("ClaimStatusBatchId");

                    b.HasIndex("ClaimStatusTransactionId");

                    b.HasIndex("ClientCptCodeId");

                    b.HasIndex("ClientFeeScheduleEntryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientProviderId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DateOfServiceFrom");

                    b.HasIndex("DateOfServiceTo");

                    b.HasIndex("EntryMd5Hash");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientId");

                    b.ToTable("ClaimStatusBatchClaims", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaimRoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BilledAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BilledAmountString")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ClaimBilledOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClaimBilledOnString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientProviderId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfBirthString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfServiceFromString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateOfServiceToString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntryMd5Hash")
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("GroupNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modifiers")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PatientFirstName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PatientLastName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ProcedureCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RenderingNpi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientProviderId");

                    b.ToTable("ClaimStatusBatchClaimRoot");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AbortedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AbortedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllClaimStatusesResolvedOrExpired")
                        .HasColumnType("bit");

                    b.Property<int?>("AssignedClientRpaConfigurationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedToHostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToRpaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedToRpaLocalProcessIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClaimStatusBatchId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DbOperationId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedOnUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbortedOnUtc");

                    b.HasIndex("AssignedClientRpaConfigurationId");

                    b.HasIndex("AssignedDateTimeUtc");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ClaimStatusBatchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DbOperationId");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ClaimStatusBatchHistories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClaimStatusExceptionReasonCategories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AuthorizationFound")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorizationNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("AuthorizationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BillingProviderNpi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("CheckPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimLineItemStatusValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ClaimStatusBatchClaimId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClaimStatusTransactionBeginDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClaimStatusTransactionEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClaimStatusTransactionLineItemStatusChangẹId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CobAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CobLastVerified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CobaInsurerEffective")
                        .HasColumnType("datetime2");

                    b.Property<string>("CobaInsurerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CoinsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurlScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentCoverage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateClaimFinalized")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeductibleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiagnosisCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EligibilityFromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EligibilityInsurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EligibilityPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EligibilityPolicyNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EligibilityStatus")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("EligibilityUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HippaStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputDataFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InputDataListIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastActiveEligibleDateRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LineItemChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LineItemControlNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("LineItemPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OtCapUsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("OtCapYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtCapYearTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_DeductibleFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_DeductibleToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_EligibilityFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_EligibilityTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PartA_RemainingDeductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PartB_DeductibleFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_DeductibleTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_EligibilityFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_EligibilityTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PartB_RemainingDeductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PenalityAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlanType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPayer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PtCapUsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PtCapYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PtCapYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonCode")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("ReasonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferringProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemarkCode")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("RemarkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceLineDenialReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAllowedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalClaimChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalClaimPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalClaimStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TotalClaimStatusValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalMemberResponsibilityAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalNonAllowedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VerifiedMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WriteoffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationStatusId");

                    b.HasIndex("CheckDate");

                    b.HasIndex("ClaimLineItemStatusId");

                    b.HasIndex("ClaimStatusBatchClaimId")
                        .IsUnique();

                    b.HasIndex("ClaimStatusExceptionReasonCategoryId");

                    b.HasIndex("ClaimStatusTransactionEndDateTimeUtc");

                    b.HasIndex("ClaimStatusTransactionLineItemStatusChangẹId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("TotalClaimStatusId");

                    b.ToTable("ClaimStatusTransactions", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AuthorizationFound")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorizationNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("AuthorizationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("BillingProviderNPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COInsurerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("CheckPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimLineItemStatusValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClaimStatusTransactionBeginDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ClaimStatusTransactionEndDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClaimStatusTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CoInsurerEffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CobAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CobLastVerified")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CoinsuranceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CopayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurlScript")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentCoverage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateClaimFinalized")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime2");

                    b.Property<int>("DbOperationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("DeductibleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiagnosisCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EligibilityFromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EligibilityInsurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EligibilityPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EligibilityPolicyNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("EligibilityStatus")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("EligibilityUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HippaStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputDataFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InputDataListIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastActiveEligibleDateRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LineItemApprovedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("LineItemChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LineItemControlNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal?>("LineItemPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OtCapUsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("OtCapYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OtCapYearTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_DeductibleFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_DeductibleToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_EligibilityFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartA_EligibilityToDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PartA_RemainingDeductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PartB_DeductibleFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_DeductibleToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_EligibilityFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PartB_EligibilityToDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PartB_RemainingDeductible")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PenalityAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PlanType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPayer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PtCapUsedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PtCapYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PtCapYearTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonCode")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("ReasonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferringProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemarkCode")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("RemarkDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceLineDenialReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAllowedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalClaimChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalClaimStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TotalClaimStatusValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalMemberResponsibilityAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalNonAllowedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VerifiedMemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WriteoffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationStatusId");

                    b.HasIndex("ClaimLineItemStatusId");

                    b.HasIndex("ClaimStatusExceptionReasonCategoryId");

                    b.HasIndex("ClaimStatusTransactionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DbOperationId");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("TotalClaimStatusId");

                    b.ToTable("ClaimStatusTransactionHistories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransactionLineItemStatusChangẹ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClaimStatusTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DbOperationId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PreviousClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("WriteoffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DbOperationId");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PreviousClaimLineItemStatusId");

                    b.HasIndex("UpdatedClaimLineItemStatusId");

                    b.ToTable("ClaimStatusTransactionLineItemStatusChangẹs", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusWorkstationNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClaimStatusTransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NoteTs")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusTransactionId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("ClaimStatusWorkstationNotes", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientEndOfMonthTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ARTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ARTotalAbove180Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ARTotalAbove90Days")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ARTotalVisits")
                        .HasColumnType("int");

                    b.Property<int>("ARTotalVisitsAbove180Days")
                        .HasColumnType("int");

                    b.Property<int>("ARTotalVisitsAbove90Days")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("MonthlyDaysInAR")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientLocationId");

                    b.ToTable("ClientEndOfMonthTotals");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientInsuranceRpaConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlternateClientRpaCredentialConfigurationId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientRpaCredentialConfigurationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentDayClaimCount")
                        .HasColumnType("int");

                    b.Property<int>("DailyClaimLimit")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RpaInsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternateClientRpaCredentialConfigurationId");

                    b.HasIndex("AuthTypeId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientRpaCredentialConfigurationId");

                    b.HasIndex("RpaInsuranceId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("ClientInsuranceId", "TransactionTypeId", "AuthTypeId", "ExternalId")
                        .IsUnique()
                        .HasFilter("[AuthTypeId] IS NOT NULL AND [ExternalId] IS NOT NULL");

                    b.ToTable("ClientInsuranceRpaConfigurations", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientRpaCredentialConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExpiryWarningReported")
                        .HasColumnType("bit");

                    b.Property<string>("FailureMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FailureReported")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredentialInUse")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("OtpForwardFromEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFailureToEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RpaInsuranceGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("UseOffHoursOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RpaInsuranceGroupId");

                    b.ToTable("ClientRpaCredentialConfigurations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.Flow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Flows", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.FlowLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowLogEntries", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualImportCount")
                        .HasColumnType("int");

                    b.Property<int?>("AttemptedImportCount")
                        .HasColumnType("int");

                    b.Property<int?>("AuthTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ByteLength")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DocumentDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportStatus")
                        .HasColumnType("int");

                    b.Property<int>("InputDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("InputDocumentTypeId");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("InputDocuments", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InputDocumentTypes", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApiIntegrationId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalWaitPeriodDays")
                        .HasColumnType("int");

                    b.Property<int>("ClaimBilledOnWaitDays")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InactivatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("RpaInsuranceGroupId")
                        .HasColumnType("int");

                    b.Property<string>("TargetUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiIntegrationId");

                    b.HasIndex("RpaInsuranceGroupId");

                    b.ToTable("RpaInsurances", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsuranceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultTargetUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RpaInsuranceGroups", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("IsMaxConsecutiveIssueResolved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReleaseKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RpaTypes", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("X12ClaimCategories", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCategoryCodeLineItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("X12ClaimCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimLineItemStatusId");

                    b.HasIndex("X12ClaimCategoryId");

                    b.ToTable("X12ClaimCategoryCodeLineItemStatuses", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCodeLineItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClaimLineItemStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("X12ClaimCodeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimLineItemStatusId");

                    b.HasIndex("ClaimStatusExceptionReasonCategoryId");

                    b.HasIndex("X12ClaimCodeTypeId");

                    b.ToTable("X12ClaimCodeLineItemStatuses", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCodeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("X12ClaimCodeTypes", "IntegratedServices");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageNo")
                        .HasColumnType("int");

                    b.Property<bool?>("Resolved")
                        .HasColumnType("bit");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Messages", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NoteTs")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ClientId");

                    b.ToTable("Notes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("CHAR(65 + ID/260000) +  CHAR(65 + ID%260000/10000) + RIGHT('0000' + CAST(ID % 10000 AS VARCHAR),4)");

                    b.Property<int>("AdministrativeGenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BenefitsCheckedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("InsuranceGroupNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsurancePolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferringProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("ResponsiblePartyId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsiblePartyRelationshipToPatient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeGenderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PersonId");

                    b.HasIndex("PrimaryProviderId");

                    b.HasIndex("ReferringProviderId");

                    b.HasIndex("ResponsiblePartyId");

                    b.ToTable("Patients", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClaimNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientAdjustmentCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientRemittanceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientLedgerChargeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientAdjustmentCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRemittanceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientLedgerChargeId");

                    b.ToTable("PatientLedgerAdjustments", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BilledToClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("BilledToInsuranceCardId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ChargeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClaimNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientPlaceOfServiceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfServiceTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IcdCode1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IcdCode4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceCard1Id")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceCard2Id")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceCard3Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modifier1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modifier2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modifier3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modifier4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientFirstBillDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientLastBillDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RenderingProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsiblePartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BilledToInsuranceCardId");

                    b.HasIndex("ClientCptCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientLocationId");

                    b.HasIndex("ClientPlaceOfServiceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("InsuranceCard1Id");

                    b.HasIndex("InsuranceCard2Id");

                    b.HasIndex("InsuranceCard3Id");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientId");

                    b.HasIndex("RenderingProviderId");

                    b.HasIndex("ResponsiblePartyId");

                    b.ToTable("PatientLedgerCharges", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClaimNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientRemittanceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedClaimNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientLedgerChargeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientRemittanceId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PatientLedgerChargeId");

                    b.ToTable("PatientLedgerPayments", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<int>("ClientQuestionnaireId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ClientQuestionnaireId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientQuestionnaire");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaireAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ClientQuestionnaireCategoryQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientQuestionnaireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientQuestionnaireCategoryQuestionId");

                    b.HasIndex("PatientQuestionnaireId");

                    b.ToTable("PatientQuestionnaireAnswers", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FaxNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderIdentityId")
                        .HasColumnType("int");

                    b.Property<long?>("HomePhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MobilePhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<long?>("OfficePhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("SocialSecurityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("GenderIdentityId");

                    b.HasIndex("LastModifiedOn");

                    b.ToTable("Persons", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PlaceOfServiceCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookupName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PlaceOfServiceCodes", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ProviderLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProviderLevels");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ReferringProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Credentials")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("License")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Npi")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("TaxId")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TaxonomyCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Upin")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("ReferringProviders", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.RelativeDateRange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RelativeDateRange");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReportCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Report", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ReportCategories", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ReportCategories", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ResponsibleParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("CHAR(65 + ID/260000) +  CHAR(65 + ID%260000/10000) + RIGHT('0000' + CAST(ID % 10000 AS VARCHAR),4)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DfCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DfExternalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DfLastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SocialSecurityNumber")
                        .HasMaxLength(9)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DfCreatedOn");

                    b.HasIndex("DfExternalId");

                    b.HasIndex("DfLastModifiedOn");

                    b.HasIndex("LastModifiedOn");

                    b.HasIndex("PersonId");

                    b.ToTable("ResponsibleParties", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.SourceSystem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SourceSystems");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specialties", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("States", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilterConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SystemDefaultReportFilters", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilterEmployeeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeRoleId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SystemDefaultReportFilterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeRoleId");

                    b.HasIndex("SystemDefaultReportFilterId");

                    b.ToTable("SystemDefaultReportFilterEmployeeRoles", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.TypeOfService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypesOfService", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UnmappedFeeScheduleCpt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BilledAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ClientCptCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DateOfServiceYear")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReferencedDateOfServiceFrom")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientCptCodeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientInsuranceId");

                    b.ToTable("UnmappedFeeScheduleCpts", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAlerts", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("UserClients", "dbo");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserDashboardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DashboardItemId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DashboardItemId");

                    b.ToTable("UserDashboardItems");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.WriteOffType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WriteOffTypes");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.IntegratedServices.ClaimStatusExceptionReasonCategoryMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimStatusExceptionReasonCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimStatusExceptionReasonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimStatusExceptionReasonCategoryId");

                    b.ToTable("ClaimStatusExceptionReasonCategoryMaps", "IntegratedServices");
                });

            modelBuilder.Entity("ClientDocumentType", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DocumentType", null)
                        .WithMany()
                        .HasForeignKey("DocumentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Address", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApiIntegration", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApiIntegrationType", "ApiIntegrationType")
                        .WithMany()
                        .HasForeignKey("ApiIntegrationTypeId");

                    b.Navigation("ApiIntegrationType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApplicationReport", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApplicationFeature", "ApplicationFeature")
                        .WithMany()
                        .HasForeignKey("ApplicationFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationFeature");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Authorization", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany()
                        .HasForeignKey("AuthTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthorizationStatus", "AuthorizationStatus")
                        .WithMany()
                        .HasForeignKey("AuthorizationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientPlaceOfService", "ClientPlaceOfService")
                        .WithMany()
                        .HasForeignKey("ClientPlaceOfServiceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany("Authorizations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthType");

                    b.Navigation("AuthorizationStatus");

                    b.Navigation("Client");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientPlaceOfService");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AuthorizationClientCptCode", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "Authorization")
                        .WithMany("AuthorizationClientCptCodes")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("ClientCptCode");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Cardholder", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClaimStatusTotalResult", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "ClientProvider")
                        .WithMany()
                        .HasForeignKey("ClientProviderId");

                    b.Navigation("Client");

                    b.Navigation("ClientCptCode");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientProvider");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Client", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientKpi", "ClientKpi")
                        .WithMany()
                        .HasForeignKey("ClientKpiId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", "ClientQuestionnaire")
                        .WithMany()
                        .HasForeignKey("ClientQuestionnaireId");

                    b.Navigation("Address");

                    b.Navigation("ClientKpi");

                    b.Navigation("ClientQuestionnaire");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientAdjustmentCode", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AdjustmentType", "AdjustmentType")
                        .WithMany()
                        .HasForeignKey("AdjustmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdjustmentType");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientApiIntegrationKey", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApiIntegration", "ApiIntegration")
                        .WithMany()
                        .HasForeignKey("ApiIntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientApiIntegrationKeys")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiIntegration");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientApplicationFeature", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApplicationFeature", "ApplicationFeature")
                        .WithMany()
                        .HasForeignKey("ApplicationFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientApplicationFeatures")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationFeature");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientAuthType", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany("ClientAuthTypes")
                        .HasForeignKey("AuthTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientAuthTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthType");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientCptCode", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.TypeOfService", "TypeOfService")
                        .WithMany()
                        .HasForeignKey("TypeOfServiceId");

                    b.Navigation("Client");

                    b.Navigation("TypeOfService");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientDayOfOperation", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientDaysOfOperation")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientEmployeeRole", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeClient", "EmployeeClient")
                        .WithMany("AssignedClientEmployeeRoles")
                        .HasForeignKey("EmployeeClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeRole", "EmployeeRole")
                        .WithMany("ClientEmployeeRole")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeClient");

                    b.Navigation("EmployeeRole");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientFeeSchedules")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleEntry", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", "ClientFeeSchedule")
                        .WithMany("ClientFeeScheduleEntries")
                        .HasForeignKey("ClientFeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientCptCode");

                    b.Navigation("ClientFeeSchedule");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleProviderLevel", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", "ClientFeeSchedule")
                        .WithMany("ClientFeeScheduleProviderLevels")
                        .HasForeignKey("ClientFeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ProviderLevel", "ProviderLevel")
                        .WithMany()
                        .HasForeignKey("ProviderLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFeeSchedule");

                    b.Navigation("ProviderLevel");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleSpecialty", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", "ClientFeeSchedule")
                        .WithMany("ClientFeeScheduleSpecialties")
                        .HasForeignKey("ClientFeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFeeSchedule");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientHoliday", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientHolidays")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Holiday", "Holiday")
                        .WithMany()
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Holiday");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsurance", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", "RpaInsurance")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("RpaInsuranceId");

                    b.Navigation("Client");

                    b.Navigation("RpaInsurance");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsuranceAverageCollectionPercentage", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", null)
                        .WithMany("ClientInsuranceAverageCollectionPercentages")
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsuranceFeeSchedule", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", "ClientFeeSchedule")
                        .WithMany("ClientInsuranceFeeSchedules")
                        .HasForeignKey("ClientFeeScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany("ClientInsuranceFeeSchedules")
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientFeeSchedule");

                    b.Navigation("ClientInsurance");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientKpi", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocation", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientLocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationInsuranceIdentifier", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany("ClientLocationInsuranceIdentifiers")
                        .HasForeignKey("ClientLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationSpeciality", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientLocation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocationTypeOfService", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.TypeOfService", "TypeOfService")
                        .WithMany()
                        .HasForeignKey("TypeOfServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientLocation");

                    b.Navigation("TypeOfService");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientPlaceOfService", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.PlaceOfServiceCode", "PlaceOfServiceCode")
                        .WithMany()
                        .HasForeignKey("PlaceOfServiceCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("PlaceOfServiceCode");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientProvider", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("Providers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ProviderLevel", "ProviderLevel")
                        .WithMany()
                        .HasForeignKey("ProviderLevelId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "SupervisingProvider")
                        .WithMany()
                        .HasForeignKey("SupervisingProviderId");

                    b.Navigation("Client");

                    b.Navigation("Person");

                    b.Navigation("ProviderLevel");

                    b.Navigation("Specialty");

                    b.Navigation("SupervisingProvider");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientProviderLocation", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany("ClientProviderLocations")
                        .HasForeignKey("ClientLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "ClientProvider")
                        .WithMany("ClientProviderLocations")
                        .HasForeignKey("ClientProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientProvider");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", "ClientQuestionnaire")
                        .WithMany("ClientQuestionnaireCategories")
                        .HasForeignKey("ClientQuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("ClientQuestionnaireCategories")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientQuestionnaire");

                    b.Navigation("QuestionCategory");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestion", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategory", "ClientQuestionnaireCategory")
                        .WithMany("ClientQuestionnaireCategoryQuestions")
                        .HasForeignKey("ClientQuestionnaireCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.QuestionCategory", null)
                        .WithMany("ClientQuestionnaireQuestions")
                        .HasForeignKey("QuestionCategoryId");

                    b.Navigation("ClientQuestionnaireCategory");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestionOption", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestion", "ClientQuestionnaireCategoryQuestion")
                        .WithMany("ClientQuestionnaireCategoryQuestionOptions")
                        .HasForeignKey("ClientQuestionnaireCategoryQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientQuestionnaireCategoryQuestion");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientRemittance", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Client");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientSpecialty", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("ClientSpecialties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientUserApplicationReport", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApplicationReport", "ApplicationReport")
                        .WithMany("ClientUserApplicationReports")
                        .HasForeignKey("ApplicationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.UserClient", "UserClient")
                        .WithMany("ClientUserApplicationReports")
                        .HasForeignKey("UserClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationReport");

                    b.Navigation("UserClient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientUserReportFilter", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilter", "SystemDefaultReportFilter")
                        .WithMany()
                        .HasForeignKey("SystemDefaultReportFilterId");

                    b.Navigation("Client");

                    b.Navigation("Report");

                    b.Navigation("SystemDefaultReportFilter");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ConcurrentAuthorization", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "InitialAuthorization")
                        .WithMany("InitialAuthorizations")
                        .HasForeignKey("InitialAuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "SucceededAuthorization")
                        .WithMany("SucceededAuthorizations")
                        .HasForeignKey("SucceededAuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitialAuthorization");

                    b.Navigation("SucceededAuthorization");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Document", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "Authorization")
                        .WithMany("Documents")
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany("Documents")
                        .HasForeignKey("PatientId");

                    b.Navigation("Authorization");

                    b.Navigation("DocumentType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Employee", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeRole", "DefaultEmployeeRole")
                        .WithMany()
                        .HasForeignKey("DefaultEmployeeRoleId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Employee", "EmployeeManager")
                        .WithMany()
                        .HasForeignKey("EmployeeManagerId");

                    b.Navigation("DefaultEmployeeRole");

                    b.Navigation("EmployeeManager");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClient", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("EmployeeClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeClients")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientAlphaSplit", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AlphaSplit", "AlphaSplit")
                        .WithMany()
                        .HasForeignKey("AlphaSplitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeClient", "EmployeeClient")
                        .WithMany("EmployeeClientAlphaSplits")
                        .HasForeignKey("EmployeeClientId");

                    b.Navigation("AlphaSplit");

                    b.Navigation("EmployeeClient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientInsurance", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany("EmployeeClientInsurances")
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeClient", "EmployeeClient")
                        .WithMany("EmployeeClientInsurances")
                        .HasForeignKey("EmployeeClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientInsurance");

                    b.Navigation("EmployeeClient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientLocation", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany("EmployeeClientLocations")
                        .HasForeignKey("ClientLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeClient", "EmployeeClient")
                        .WithMany("EmployeeClientLocations")
                        .HasForeignKey("EmployeeClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientLocation");

                    b.Navigation("EmployeeClient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClientUserReportFilter", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientUserReportFilter", "ClientUserReportFilter")
                        .WithMany("EmployeeClientUserReportFilters")
                        .HasForeignKey("ClientUserReportFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeClient", "EmployeeClient")
                        .WithMany()
                        .HasForeignKey("EmployeeClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientUserReportFilter");

                    b.Navigation("EmployeeClient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRoleClaimStatusExceptionReasonCategory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", "ClaimStatusExceptionReasonCategory")
                        .WithMany()
                        .HasForeignKey("ClaimStatusExceptionReasonCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeRole", "EmployeeRole")
                        .WithMany("EmployeeRoleClaimStatusExceptionReasonCategories")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimStatusExceptionReasonCategory");

                    b.Navigation("EmployeeRole");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRoleDepartment", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeRole", "EmployeeRole")
                        .WithMany("EmployeeRoleDepartments")
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("EmployeeRole");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ImportDocumentMessage", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaim", "ClaimStatusBatchClaim")
                        .WithMany()
                        .HasForeignKey("ClaimStatusBatchClaimId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocument", "InputDocument")
                        .WithMany("ImportDocumentMessages")
                        .HasForeignKey("InputDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimStatusBatchClaim");

                    b.Navigation("InputDocument");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.InsuranceCard", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Cardholder", "Cardholder")
                        .WithMany("InsuranceCards")
                        .HasForeignKey("CardholderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cardholder");

                    b.Navigation("Client");

                    b.Navigation("Insurance");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatch", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany()
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryRpaConfiguration", "ChargeEntryRpaConfiguration")
                        .WithMany()
                        .HasForeignKey("ChargeEntryRpaConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthType");

                    b.Navigation("ChargeEntryRpaConfiguration");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatchHistory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany()
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatch", "ChargeEntryBatch")
                        .WithMany("ChargeEntryBatchHistories")
                        .HasForeignKey("ChargeEntryBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryRpaConfiguration", "ChargeEntryRpaConfiguration")
                        .WithMany()
                        .HasForeignKey("ChargeEntryRpaConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DbOperation", "DbOperation")
                        .WithMany()
                        .HasForeignKey("DbOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthType");

                    b.Navigation("ChargeEntryBatch");

                    b.Navigation("ChargeEntryRpaConfiguration");

                    b.Navigation("Client");

                    b.Navigation("DbOperation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryRpaConfiguration", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany()
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.RelativeDateRange", "RelativeDateRange")
                        .WithMany()
                        .HasForeignKey("RelativeDateRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaType", "RpaType")
                        .WithMany()
                        .HasForeignKey("RpaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthType");

                    b.Navigation("Client");

                    b.Navigation("RelativeDateRange");

                    b.Navigation("RpaType");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransaction", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatch", null)
                        .WithMany("ChargeEntryTransactions")
                        .HasForeignKey("ChargeEntryBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransactionHistory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransaction", null)
                        .WithMany("ChargeEntryTransactionHistories")
                        .HasForeignKey("ChargeEntryTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClaimStatusType", "ClaimStatusType")
                        .WithMany()
                        .HasForeignKey("ClaimStatusTypeId");

                    b.Navigation("ClaimStatusType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatch", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientInsuranceRpaConfiguration", "AssignedClientRpaConfiguration")
                        .WithMany()
                        .HasForeignKey("AssignedClientRpaConfigurationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany("ClaimStatusBatches")
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocument", "InputDocument")
                        .WithMany("ClaimStatusBatches")
                        .HasForeignKey("InputDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", null)
                        .WithMany("ClaimStatusBatches")
                        .HasForeignKey("RpaInsuranceId");

                    b.Navigation("AssignedClientRpaConfiguration");

                    b.Navigation("AuthType");

                    b.Navigation("Client");

                    b.Navigation("ClientInsurance");

                    b.Navigation("InputDocument");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaim", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaimRoot", "ClaimStatusBatchClaimRoot")
                        .WithMany("ClaimStatusBatchClaims")
                        .HasForeignKey("ClaimStatusBatchClaimRootId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatch", "ClaimStatusBatch")
                        .WithMany("ClaimStatusBatchClaims")
                        .HasForeignKey("ClaimStatusBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", "ClaimStatusTransaction")
                        .WithMany()
                        .HasForeignKey("ClaimStatusTransactionId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleEntry", "ClientFeeScheduleEntry")
                        .WithMany("ClaimStatusBatchClaims")
                        .HasForeignKey("ClientFeeScheduleEntryId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "ClientProvider")
                        .WithMany()
                        .HasForeignKey("ClientProviderId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("ClaimStatusBatch");

                    b.Navigation("ClaimStatusBatchClaimRoot");

                    b.Navigation("ClaimStatusTransaction");

                    b.Navigation("Client");

                    b.Navigation("ClientCptCode");

                    b.Navigation("ClientFeeScheduleEntry");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientProvider");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaimRoot", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "ClientProvider")
                        .WithMany()
                        .HasForeignKey("ClientProviderId");

                    b.Navigation("Client");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientProvider");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchHistory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientInsuranceRpaConfiguration", "AssignedClientRpaConfiguration")
                        .WithMany()
                        .HasForeignKey("AssignedClientRpaConfigurationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany()
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatch", "ClaimStatusBatch")
                        .WithMany("ClaimStatusBatchHistories")
                        .HasForeignKey("ClaimStatusBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DbOperation", "DbOperation")
                        .WithMany()
                        .HasForeignKey("DbOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedClientRpaConfiguration");

                    b.Navigation("AuthType");

                    b.Navigation("ClaimStatusBatch");

                    b.Navigation("Client");

                    b.Navigation("ClientInsurance");

                    b.Navigation("DbOperation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthorizationStatus", "AuthorizationStatus")
                        .WithMany()
                        .HasForeignKey("AuthorizationStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "ClaimLineItemStatus")
                        .WithMany("ClaimStatusTransactions")
                        .HasForeignKey("ClaimLineItemStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaim", "ClaimStatusBatchClaim")
                        .WithMany()
                        .HasForeignKey("ClaimStatusBatchClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", "ClaimStatusExceptionReasonCategory")
                        .WithMany()
                        .HasForeignKey("ClaimStatusExceptionReasonCategoryId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransactionLineItemStatusChangẹ", "ClaimStatusTransactionLineItemStatusChangẹ")
                        .WithMany()
                        .HasForeignKey("ClaimStatusTransactionLineItemStatusChangẹId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatus", "TotalClaimStatus")
                        .WithMany()
                        .HasForeignKey("TotalClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorizationStatus");

                    b.Navigation("ClaimLineItemStatus");

                    b.Navigation("ClaimStatusBatchClaim");

                    b.Navigation("ClaimStatusExceptionReasonCategory");

                    b.Navigation("ClaimStatusTransactionLineItemStatusChangẹ");

                    b.Navigation("Client");

                    b.Navigation("TotalClaimStatus");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransactionHistory", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthorizationStatus", "AuthorizationStatus")
                        .WithMany()
                        .HasForeignKey("AuthorizationStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "ClaimLineItemStatus")
                        .WithMany()
                        .HasForeignKey("ClaimLineItemStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", "ClaimStatusExceptionReasonCategory")
                        .WithMany()
                        .HasForeignKey("ClaimStatusExceptionReasonCategoryId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", "ClaimStatusTransaction")
                        .WithMany("ClaimStatusTransactionHistories")
                        .HasForeignKey("ClaimStatusTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DbOperation", "DbOperation")
                        .WithMany()
                        .HasForeignKey("DbOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatus", "TotalClaimStatus")
                        .WithMany()
                        .HasForeignKey("TotalClaimStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorizationStatus");

                    b.Navigation("ClaimLineItemStatus");

                    b.Navigation("ClaimStatusExceptionReasonCategory");

                    b.Navigation("ClaimStatusTransaction");

                    b.Navigation("Client");

                    b.Navigation("DbOperation");

                    b.Navigation("TotalClaimStatus");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransactionLineItemStatusChangẹ", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DbOperation", "DbOperation")
                        .WithMany()
                        .HasForeignKey("DbOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "PreviousClaimLineItemStatus")
                        .WithMany()
                        .HasForeignKey("PreviousClaimLineItemStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "UpdatedClaimLineItemStatus")
                        .WithMany()
                        .HasForeignKey("UpdatedClaimLineItemStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DbOperation");

                    b.Navigation("PreviousClaimLineItemStatus");

                    b.Navigation("UpdatedClaimLineItemStatus");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusWorkstationNotes", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", "ClaimStatusTransaction")
                        .WithMany("ClaimStatusWorkstationNotes")
                        .HasForeignKey("ClaimStatusTransactionId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.Navigation("ClaimStatusTransaction");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientEndOfMonthTotal", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.Navigation("Client");

                    b.Navigation("ClientLocation");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientInsuranceRpaConfiguration", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientRpaCredentialConfiguration", "AlternateClientRpaCredentialConfiguration")
                        .WithMany()
                        .HasForeignKey("AlternateClientRpaCredentialConfigurationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AuthType", "AuthType")
                        .WithMany("ClientInsuranceRpaConfigurations")
                        .HasForeignKey("AuthTypeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientRpaCredentialConfiguration", "ClientRpaCredentialConfiguration")
                        .WithMany()
                        .HasForeignKey("ClientRpaCredentialConfigurationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", null)
                        .WithMany("ClientInsuranceRpaConfigurations")
                        .HasForeignKey("RpaInsuranceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternateClientRpaCredentialConfiguration");

                    b.Navigation("AuthType");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientRpaCredentialConfiguration");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClientRpaCredentialConfiguration", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsuranceGroup", "RpaInsuranceGroup")
                        .WithMany()
                        .HasForeignKey("RpaInsuranceGroupId");

                    b.Navigation("RpaInsuranceGroup");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.FlowLogEntry", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.Flow", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocument", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("InputDocuments")
                        .HasForeignKey("ClientId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocumentType", "InputDocumentType")
                        .WithMany()
                        .HasForeignKey("InputDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientInsurance");

                    b.Navigation("ClientLocation");

                    b.Navigation("InputDocumentType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ApiIntegration", "ApiIntegration")
                        .WithMany()
                        .HasForeignKey("ApiIntegrationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsuranceGroup", "RpaInsuranceGroup")
                        .WithMany()
                        .HasForeignKey("RpaInsuranceGroupId");

                    b.Navigation("ApiIntegration");

                    b.Navigation("RpaInsuranceGroup");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCategoryCodeLineItemStatus", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "ClaimLineItemStatus")
                        .WithMany()
                        .HasForeignKey("ClaimLineItemStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCategory", "X12ClaimCategory")
                        .WithMany()
                        .HasForeignKey("X12ClaimCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimLineItemStatus");

                    b.Navigation("X12ClaimCategory");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCodeLineItemStatus", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", "ClaimLineItemStatus")
                        .WithMany()
                        .HasForeignKey("ClaimLineItemStatusId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", "ClaimStatusExceptionReasonCategory")
                        .WithMany()
                        .HasForeignKey("ClaimStatusExceptionReasonCategoryId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.X12ClaimCodeType", "X12ClaimCodeType")
                        .WithMany()
                        .HasForeignKey("X12ClaimCodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimLineItemStatus");

                    b.Navigation("ClaimStatusExceptionReasonCategory");

                    b.Navigation("X12ClaimCodeType");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Message", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Note", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "Authorization")
                        .WithMany("Notes")
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Patient", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.AdministrativeGender", "AdministrativeGender")
                        .WithMany()
                        .HasForeignKey("AdministrativeGenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "PrimaryProvider")
                        .WithMany("Patients")
                        .HasForeignKey("PrimaryProviderId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ReferringProvider", "ReferringProvider")
                        .WithMany("Patients")
                        .HasForeignKey("ReferringProviderId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ResponsibleParty", "ResponsibleParty")
                        .WithMany("Patients")
                        .HasForeignKey("ResponsiblePartyId");

                    b.Navigation("AdministrativeGender");

                    b.Navigation("Client");

                    b.Navigation("Person");

                    b.Navigation("PrimaryProvider");

                    b.Navigation("ReferringProvider");

                    b.Navigation("ResponsibleParty");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerAdjustment", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientAdjustmentCode", "ClientAdjustmentCode")
                        .WithMany()
                        .HasForeignKey("ClientAdjustmentCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientRemittance", "ClientRemittance")
                        .WithMany()
                        .HasForeignKey("ClientRemittanceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.PatientLedgerCharge", "PatientLedgerCharge")
                        .WithMany()
                        .HasForeignKey("PatientLedgerChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientAdjustmentCode");

                    b.Navigation("ClientRemittance");

                    b.Navigation("PatientLedgerCharge");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerCharge", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.InsuranceCard", "BilledToInsuranceCard")
                        .WithMany()
                        .HasForeignKey("BilledToInsuranceCardId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientLocation", "ClientLocation")
                        .WithMany()
                        .HasForeignKey("ClientLocationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientPlaceOfService", "ClientPlaceOfService")
                        .WithMany()
                        .HasForeignKey("ClientPlaceOfServiceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.InsuranceCard", "InsuranceCard1")
                        .WithMany()
                        .HasForeignKey("InsuranceCard1Id");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.InsuranceCard", "InsuranceCard2")
                        .WithMany()
                        .HasForeignKey("InsuranceCard2Id");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.InsuranceCard", "InsuranceCard3")
                        .WithMany()
                        .HasForeignKey("InsuranceCard3Id");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientProvider", "RenderingProvider")
                        .WithMany()
                        .HasForeignKey("RenderingProviderId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ResponsibleParty", "ResponsibleParty")
                        .WithMany("PatientLedgerCharges")
                        .HasForeignKey("ResponsiblePartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BilledToInsuranceCard");

                    b.Navigation("Client");

                    b.Navigation("ClientCptCode");

                    b.Navigation("ClientLocation");

                    b.Navigation("ClientPlaceOfService");

                    b.Navigation("InsuranceCard1");

                    b.Navigation("InsuranceCard2");

                    b.Navigation("InsuranceCard3");

                    b.Navigation("Patient");

                    b.Navigation("RenderingProvider");

                    b.Navigation("ResponsibleParty");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientLedgerPayment", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientRemittance", "ClientRemittance")
                        .WithMany("ClientClaimPayments")
                        .HasForeignKey("ClientRemittanceId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.PatientLedgerCharge", "PatientLedgerCharge")
                        .WithMany()
                        .HasForeignKey("PatientLedgerChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientRemittance");

                    b.Navigation("PatientLedgerCharge");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaire", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Authorization", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", "ClientQuestionnaire")
                        .WithMany("PatientQuestionnaires")
                        .HasForeignKey("ClientQuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authorization");

                    b.Navigation("ClientQuestionnaire");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaireAnswer", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestion", "ClientQuestionnaireCategoryQuestion")
                        .WithMany()
                        .HasForeignKey("ClientQuestionnaireCategoryQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaire", "PatientQuestionnaire")
                        .WithMany("PatientQuestionnairesAnswers")
                        .HasForeignKey("PatientQuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientQuestionnaireCategoryQuestion");

                    b.Navigation("PatientQuestionnaire");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Person", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany("Person")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.GenderIdentity", "GenderIdentity")
                        .WithMany()
                        .HasForeignKey("GenderIdentityId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("GenderIdentity");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ReferringProvider", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Person");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ResponsibleParty", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilterEmployeeRole", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.EmployeeRole", "EmployeeRole")
                        .WithMany()
                        .HasForeignKey("EmployeeRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilter", "SystemDefaultReportFilter")
                        .WithMany("SystemDefaultReportFilterEmployeeRoles")
                        .HasForeignKey("SystemDefaultReportFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeRole");

                    b.Navigation("SystemDefaultReportFilter");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UnmappedFeeScheduleCpt", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientCptCode", "ClientCptCode")
                        .WithMany()
                        .HasForeignKey("ClientCptCodeId");

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedHelpAuthorizations.Domain.Entities.ClientInsurance", "ClientInsurance")
                        .WithMany()
                        .HasForeignKey("ClientInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ClientCptCode");

                    b.Navigation("ClientInsurance");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserClient", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserDashboardItem", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.DashboardItem", "DashboardItem")
                        .WithMany()
                        .HasForeignKey("DashboardItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashboardItem");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.IntegratedServices.ClaimStatusExceptionReasonCategoryMap", b =>
                {
                    b.HasOne("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", "ClaimStatusExceptionReasonCategory")
                        .WithMany("ClaimStatusExceptionReasonCategoryMaps")
                        .HasForeignKey("ClaimStatusExceptionReasonCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimStatusExceptionReasonCategory");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ApplicationReport", b =>
                {
                    b.Navigation("ClientUserApplicationReports");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.AuthType", b =>
                {
                    b.Navigation("ClaimStatusBatches");

                    b.Navigation("ClientAuthTypes");

                    b.Navigation("ClientInsuranceRpaConfigurations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Authorization", b =>
                {
                    b.Navigation("AuthorizationClientCptCodes");

                    b.Navigation("Documents");

                    b.Navigation("InitialAuthorizations");

                    b.Navigation("Notes");

                    b.Navigation("SucceededAuthorizations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Cardholder", b =>
                {
                    b.Navigation("InsuranceCards");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientApiIntegrationKeys");

                    b.Navigation("ClientApplicationFeatures");

                    b.Navigation("ClientAuthTypes");

                    b.Navigation("ClientDaysOfOperation");

                    b.Navigation("ClientFeeSchedules");

                    b.Navigation("ClientHolidays");

                    b.Navigation("ClientInsurances");

                    b.Navigation("ClientLocations");

                    b.Navigation("ClientSpecialties");

                    b.Navigation("EmployeeClients");

                    b.Navigation("InputDocuments");

                    b.Navigation("Person");

                    b.Navigation("Providers");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeSchedule", b =>
                {
                    b.Navigation("ClientFeeScheduleEntries");

                    b.Navigation("ClientFeeScheduleProviderLevels");

                    b.Navigation("ClientFeeScheduleSpecialties");

                    b.Navigation("ClientInsuranceFeeSchedules");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientFeeScheduleEntry", b =>
                {
                    b.Navigation("ClaimStatusBatchClaims");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientInsurance", b =>
                {
                    b.Navigation("ClientInsuranceAverageCollectionPercentages");

                    b.Navigation("ClientInsuranceFeeSchedules");

                    b.Navigation("EmployeeClientInsurances");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientLocation", b =>
                {
                    b.Navigation("ClientLocationInsuranceIdentifiers");

                    b.Navigation("ClientProviderLocations");

                    b.Navigation("EmployeeClientLocations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientProvider", b =>
                {
                    b.Navigation("ClientProviderLocations");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaire", b =>
                {
                    b.Navigation("ClientQuestionnaireCategories");

                    b.Navigation("PatientQuestionnaires");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategory", b =>
                {
                    b.Navigation("ClientQuestionnaireCategoryQuestions");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientQuestionnaireCategoryQuestion", b =>
                {
                    b.Navigation("ClientQuestionnaireCategoryQuestionOptions");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientRemittance", b =>
                {
                    b.Navigation("ClientClaimPayments");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ClientUserReportFilter", b =>
                {
                    b.Navigation("EmployeeClientUserReportFilters");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeClients");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeClient", b =>
                {
                    b.Navigation("AssignedClientEmployeeRoles");

                    b.Navigation("EmployeeClientAlphaSplits");

                    b.Navigation("EmployeeClientInsurances");

                    b.Navigation("EmployeeClientLocations");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.EmployeeRole", b =>
                {
                    b.Navigation("ClientEmployeeRole");

                    b.Navigation("EmployeeRoleClaimStatusExceptionReasonCategories");

                    b.Navigation("EmployeeRoleDepartments");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryBatch", b =>
                {
                    b.Navigation("ChargeEntryBatchHistories");

                    b.Navigation("ChargeEntryTransactions");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ChargeEntryTransaction", b =>
                {
                    b.Navigation("ChargeEntryTransactionHistories");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimLineItemStatus", b =>
                {
                    b.Navigation("ClaimStatusTransactions");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatch", b =>
                {
                    b.Navigation("ClaimStatusBatchClaims");

                    b.Navigation("ClaimStatusBatchHistories");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusBatchClaimRoot", b =>
                {
                    b.Navigation("ClaimStatusBatchClaims");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusExceptionReasonCategory", b =>
                {
                    b.Navigation("ClaimStatusExceptionReasonCategoryMaps");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.ClaimStatusTransaction", b =>
                {
                    b.Navigation("ClaimStatusTransactionHistories");

                    b.Navigation("ClaimStatusWorkstationNotes");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.InputDocument", b =>
                {
                    b.Navigation("ClaimStatusBatches");

                    b.Navigation("ImportDocumentMessages");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.IntegratedServices.RpaInsurance", b =>
                {
                    b.Navigation("ClaimStatusBatches");

                    b.Navigation("ClientInsuranceRpaConfigurations");

                    b.Navigation("ClientInsurances");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.PatientQuestionnaire", b =>
                {
                    b.Navigation("PatientQuestionnairesAnswers");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.QuestionCategory", b =>
                {
                    b.Navigation("ClientQuestionnaireCategories");

                    b.Navigation("ClientQuestionnaireQuestions");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ReferringProvider", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.ResponsibleParty", b =>
                {
                    b.Navigation("PatientLedgerCharges");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.SystemDefaultReportFilter", b =>
                {
                    b.Navigation("SystemDefaultReportFilterEmployeeRoles");
                });

            modelBuilder.Entity("MedHelpAuthorizations.Domain.Entities.UserClient", b =>
                {
                    b.Navigation("ClientUserApplicationReports");
                });
#pragma warning restore 612, 618
        }
    }
}
